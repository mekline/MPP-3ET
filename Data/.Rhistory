library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
#install.packages("stringr")
library("stringr")
setwd('~/Desktop/MannerPathPriming-3ET')
# Reading in subject list
subjects <- read.csv("all_participants_MPP3ET.csv")
# Declaring an empty df to append to
allData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_data_table <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_timestamps <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## Declaring function trial_time, where a is a given value and f a timestamp
trial_time <- function(x) {
f = df_timestamps$system_time_stamp
a = x
## search for the maximum timestamp where the timestamp is equal to or less than value a
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
## if the vector is empty, return the timestamp of the minimum value bigger than a,
## if the vector is not empty, return the vector
if(identical(z,character(0))) {
y = min(which(f > a))
temp = as.character(df_timestamps$point_description[y])
return(temp)
} else {
return(z)
}
}
# Declaring empty variables
subj.folders <- list.dirs(recursive = FALSE)
file.names_practice <- NULL
file.names_main <- NULL
file.names_extend <- NULL
for(i in subj.folders){
############################
# Importing files specific to participant
############################
# Gettting all the practice trials for 1 subject
file.names_practice_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
file.names_practice <- c(file.names_practice, file.names_practice_temp)
# Getting all the main trials for 1 subject
file.names_main_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, all.files = FALSE, pattern = ".*(Main|noBias)_.*\\.csv$")
x = (file.names_main_temp)
if(identical(x,character(0))) {
NULL
}
else {
file.names_main <- c(file.names_main, file.names_main_temp)
}
# Getting all the extend trials for 1 subject
file.names_extend_temp <- list.files(path = i, full.names = TRUE, recursive = FALSE, pattern = ".*\\Extend_.*.csv")
file.names_extend <- c(file.names_extend, file.names_extend_temp)
# Importing timestamps
timestamps <- list.files(path = i, pattern="^timestamps.*\\.csv", full.names = TRUE )
print(timestamps)
if(identical(timestamps,character(0))) {
NULL
}
else {
temp <- read.csv(timestamps, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_timestamps <- rbind(df_timestamps, temp)
}
}
for(i in subj.folders){
# Reading in data table
data_table <- list.files(path = i, pattern=".*\\.dat", full.names=TRUE)
if(identical(data_table, character(0))) {
NULL
}
else {
temp <- read.delim(data_table, header=TRUE, sep=",")
df_data_table <- rbind(df_data_table, temp)
}
## makes an empty data frame
subjData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_practice <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eye-tracking data of the practice runs in the data frame
for(file in file.names_practice){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_practice <-rbind(df_practice, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_practice)[which(names(df_practice) == "description")] <- "trialNo"
df_practice$L_valid <- as.factor(df_practice$L_valid)
df_practice$R_valid <- as.factor(df_practice$R_valid)
df_practice$system_time_stamp <- df_practice$system_time_stamp - 1500000000000000
df_practice$phase <- 'Practice'
# Merging together dat_table and trials to get correctness
df_practice$trialNo <- as.factor(ifelse(df_practice$trialNo == "All_of_Practice_1", "1",
ifelse(df_practice$trialNo == "All_of_Practice_2", "2",
ifelse(df_practice$trialNo == "All_of_Practice_3", "3",
ifelse(df_practice$trialNo == "All_of_Practice_4", "4", "Error")))))
subjData <- rbind(subjData, df_practice)
}
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
#install.packages("eyetrackingR")
install.packages('sqldf')
library("eyetrackingR")
library("plyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("tidyr")
library("stringr")
library("sqldf")
library("dplyr")
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
#install.packages("eyetrackingR")
install.packages('sqldf')
install.packages("sqldf")
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
#install.packages("eyetrackingR")
#install.packages('sqldf')
library("eyetrackingR")
library("plyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("tidyr")
library("stringr")
library("sqldf")
library("dplyr")
library("bootstrap")
install.packages(bootstrap)
install.packages('bootstrap')
#install.packages('bootstrap')
library("bootstrap")
library("testthat")
#=======CUSTOM FUNS=======#
validate.names = function(df){
rtn = df
valid_column_names = make.names(names=names(df), unique=TRUE, allow_ = TRUE)
names(rtn) = valid_column_names
rtn
}
mean.na.rm <- function(mylist){
return(mean(mylist, na.rm=TRUE))
}
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean.na.rm)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean.na.rm)
return(quantile(foo$thetastar, 0.025)[1])
}
se <- function(mylist){
return(sd(mylist)/sqrt(length(mylist)))
}
kids_to_process <- c('2018-07-05_ChildPilot1x2',
'2018-07-05_ChildPilot2',
'2018-07-05_ChildPilot3')
myRepo = '~/Desktop/MannerPathPriming-3ET/Analysis/OLivia W. MPP3ET'
analysisDir = paste(myRepo, '/Analysis/Analysis_Pilot3/',sep='')
dataDir = paste(myRepo, '/Data/Pilot 3/',sep='')
########
context('Check that directory was set correctly and participant file loads!')
expect_true(dir.exists(myRepo))
setwd(myRepo)
pData <- read.csv('all_participants_MPP3ET.csv', stringsAsFactors = FALSE)
#load participantdata
pData <- read.csv('all_participants_MPP3ET.csv', stringsAsFactors = FALSE)
myRepo = '~/Desktop/MannerPathPriming-3ET/'
analysisDir = paste(myRepo, '/Analysis/Analysis_Pilot3/',sep='')
dataDir = paste(myRepo, '/Data/Pilot 3/',sep='')
########
context('Check that directory was set correctly and participant file loads!')
expect_true(dir.exists(myRepo))
setwd(myRepo)
pData <- read.csv('all_participants_MPP3ET.csv', stringsAsFactors = FALSE)
#load participantdata
pData <- read.csv('all_participants_MPP3ET.csv', stringsAsFactors = FALSE)
pData <- pData %>%
filter(SubjectID %in% kids_to_process)%>%
mutate(subjectID = str_to_lower(SubjectID))%>%
select(-SubjectID)
context('Check all participants were found in the csv')
expect_that(length(unique(pData$subjectID)), equals(length(kids_to_process)))
#Load data for all participants from their data folders
DatData <- data.frame(NULL)
TimestampData <- data.frame(NULL)
GazeData <- data.frame(NULL)
kids_to_process <- str_to_lower(kids_to_process)
for(ID in pData$subjectID){
myDataDir <- paste(dataDir, ID, '/', sep='')
setwd(myDataDir)
print(ID)
myDatFile <- paste('data_MPPCREATION_',ID, '.dat', sep='')
myTimestampFile <- paste('timestamps_MPPCREATION_',ID,'.csv',sep='')
myMainGazeFiles <- list.files(path = myDataDir, full.names = TRUE, pattern = ".*\\Main_.*.csv")
myPracticeGazeFiles <- list.files(path = myDataDir, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
myDatData <- read.csv(myDatFile, stringsAsFactors = FALSE)
myTimestampData <- read.csv(myTimestampFile, stringsAsFactors = FALSE)
myGazeData <- data.frame(NULL)
for (f in myMainGazeFiles){
thisGazeData = read.csv(f, stringsAsFactors = FALSE)
thisGazeData$filename = f
thisGazeData$phaseGaze = 'Main'
if(nrow(myGazeData) == 0) {
myGazeData = thisGazeData
} else{
myGazeData = bind_rows(myGazeData, thisGazeData)
}
}
for (f in myPracticeGazeFiles){
thisGazeData = read.csv(f, stringsAsFactors = FALSE)
thisGazeData$filename = f
thisGazeData$phaseGaze = 'Practice'
myGazeData = bind_rows(myGazeData, thisGazeData)
}
#Add everything to the big DFs!
if (nrow(DatData) == 0){ #special case for 1st round
DatData = myDatData
TimestampData = myTimestampData
GazeData = myGazeData
} else {
DatData = bind_rows(DatData, myDatData)
TimestampData = bind_rows(TimestampData, myTimestampData)
GazeData = bind_rows(GazeData, myGazeData)
}
}
setwd(analysisDir)
myDataDir <- paste(dataDir,ID,'/',sep='')
setwd(myDataDir)
View(pData)
###############################
# THE SCRIPT
###############################
#
# Put description here
#
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
#install.packages("eyetrackingR")
#install.packages('sqldf')
library("eyetrackingR")
library("plyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("tidyr")
library("stringr")
library("sqldf")
library("dplyr")
#install.packages('bootstrap')
library("bootstrap")
library("testthat")
#=======CUSTOM FUNS=======#
validate.names = function(df){
rtn = df
valid_column_names = make.names(names=names(df), unique=TRUE, allow_ = TRUE)
names(rtn) = valid_column_names
rtn
}
mean.na.rm <- function(mylist){
return(mean(mylist, na.rm=TRUE))
}
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean.na.rm)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean.na.rm)
return(quantile(foo$thetastar, 0.025)[1])
}
se <- function(mylist){
return(sd(mylist)/sqrt(length(mylist)))
}
#=========================#
kids_to_process <- c('2018-07-05_ChildPilot1x2',
'2018-07-05_ChildPilot2',
'2018-07-05_ChildPilot3')
#Set your directories
myRepo = '~/Desktop/MannerPathPriming-3ET/'
analysisDir = paste(myRepo, '/Analysis/Analysis_Pilot3/',sep='')
dataDir = paste(myRepo, '/Data/Pilot 3/',sep='')
###############################
# THE SCRIPT
###############################
#
# Put description here
#
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
#install.packages("eyetrackingR")
#install.packages('sqldf')
library("eyetrackingR")
library("plyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("tidyr")
library("stringr")
library("sqldf")
library("dplyr")
#install.packages('bootstrap')
library("bootstrap")
library("testthat")
#=======CUSTOM FUNS=======#
validate.names = function(df){
rtn = df
valid_column_names = make.names(names=names(df), unique=TRUE, allow_ = TRUE)
names(rtn) = valid_column_names
rtn
}
mean.na.rm <- function(mylist){
return(mean(mylist, na.rm=TRUE))
}
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean.na.rm)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean.na.rm)
return(quantile(foo$thetastar, 0.025)[1])
}
se <- function(mylist){
return(sd(mylist)/sqrt(length(mylist)))
}
#=========================#
kids_to_process <- c('2018-07-05_ChildPilot1x2',
'2018-07-05_ChildPilot2',
'2018-07-05_ChildPilot3')
#Set your directories
myRepo = '~/Desktop/MannerPathPriming-3ET/Data'
analysisDir = paste(myRepo, '/Analysis/Analysis_Pilot3/',sep='')
dataDir = paste(myRepo, '/Data/Pilot 3/',sep='')
########
context('Check that directory was set correctly and participant file loads!')
expect_true(dir.exists(myRepo))
########
###############################
# LOAD DATA
###############################
setwd(myRepo)
pData <- read.csv('all_participants_MPP3ET.csv', stringsAsFactors = FALSE)
#load participantdata
pData <- read.csv('all_participants_MPP3ET.csv', stringsAsFactors = FALSE)
pData <- pData %>%
filter(SubjectID %in% kids_to_process)%>%
mutate(subjectID = str_to_lower(SubjectID))%>%
select(-SubjectID)
context('Check all participants were found in the csv')
expect_that(length(unique(pData$subjectID)), equals(length(kids_to_process)))
#Load data for all participants from their data folders
DatData <- data.frame(NULL)
TimestampData <- data.frame(NULL)
GazeData <- data.frame(NULL)
kids_to_process <- str_to_lower(kids_to_process)
for(ID in pData$subjectID){
myDataDir <- paste(dataDir,ID,'/',sep='')
setwd(myDataDir)
print(ID)
###############################
# THE SCRIPT
###############################
#
# Put description here
#
###############################
# Preliminaries
###############################
#Run these two lines the first time only to install eyetrackingR
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
#install.packages("eyetrackingR")
#install.packages('sqldf')
library("eyetrackingR")
library("plyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("tidyr")
library("stringr")
library("sqldf")
library("dplyr")
#install.packages('bootstrap')
library("bootstrap")
library("testthat")
#=======CUSTOM FUNS=======#
validate.names = function(df){
rtn = df
valid_column_names = make.names(names=names(df), unique=TRUE, allow_ = TRUE)
names(rtn) = valid_column_names
rtn
}
mean.na.rm <- function(mylist){
return(mean(mylist, na.rm=TRUE))
}
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean.na.rm)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean.na.rm)
return(quantile(foo$thetastar, 0.025)[1])
}
se <- function(mylist){
return(sd(mylist)/sqrt(length(mylist)))
}
#=========================#
kids_to_process <- c('2018-07-05_ChildPilot1x2',
'2018-07-05_ChildPilot2',
'2018-07-05_ChildPilot3')
#Set your directories
myRepo = '~/Desktop/MannerPathPriming-3ET/Data'
analysisDir = paste(myRepo, '/Analysis/Analysis_Pilot3/',sep='')
dataDir = paste(myRepo, '/Data/Pilot 3/',sep='')
########
context('Check that directory was set correctly and participant file loads!')
expect_true(dir.exists(myRepo))
########
###############################
# LOAD DATA
###############################
setwd(myRepo)
pData <- read.csv('all_participants_MPP3ET.csv', stringsAsFactors = FALSE)
#load participantdata
pData <- read.csv('all_participants_MPP3ET.csv', stringsAsFactors = FALSE)
pData <- pData %>%
filter(SubjectID %in% kids_to_process)%>%
mutate(subjectID = str_to_lower(SubjectID))%>%
select(-SubjectID)
context('Check all participants were found in the csv')
expect_that(length(unique(pData$subjectID)), equals(length(kids_to_process)))
#Load data for all participants from their data folders
DatData <- data.frame(NULL)
TimestampData <- data.frame(NULL)
GazeData <- data.frame(NULL)
kids_to_process <- str_to_lower(kids_to_process)
for(ID in pData$subjectID){
myDataDir <- paste(dataDir,ID,'/',sep='')
setwd(myDataDir)
print(ID)
myDatFile <- paste('data_MPPCREATION_',ID, '.dat', sep='')
myTimestampFile <- paste('timestamps_MPPCREATION_',ID,'.csv',sep='')
myMainGazeFiles <- list.files(path = myDataDir, full.names = TRUE, pattern = ".*\\Main_.*.csv")
myPracticeGazeFiles <- list.files(path = myDataDir, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
myDatData <- read.csv(myDatFile, stringsAsFactors = FALSE)
myTimestampData <- read.csv(myTimestampFile, stringsAsFactors = FALSE)
myGazeData <- data.frame(NULL)
for (f in myMainGazeFiles){
thisGazeData = read.csv(f, stringsAsFactors = FALSE)
thisGazeData$filename = f
thisGazeData$phaseGaze = 'Main'
if(nrow(myGazeData) == 0) {
myGazeData = thisGazeData
} else{
myGazeData = bind_rows(myGazeData, thisGazeData)
}
}
for (f in myPracticeGazeFiles){
thisGazeData = read.csv(f, stringsAsFactors = FALSE)
thisGazeData$filename = f
thisGazeData$phaseGaze = 'Practice'
myGazeData = bind_rows(myGazeData, thisGazeData)
}
#Add everything to the big DFs!
if (nrow(DatData) == 0){ #special case for 1st round
DatData = myDatData
TimestampData = myTimestampData
GazeData = myGazeData
} else {
DatData = bind_rows(DatData, myDatData)
TimestampData = bind_rows(TimestampData, myTimestampData)
GazeData = bind_rows(GazeData, myGazeData)
}
}
setwd(analysisDir)
