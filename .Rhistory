y = min(which(f > a))
temp = as.character(df_timestamps$point_description[y])
return(temp)
} else {
return(z)
}
}
# Declaring empty variables
subj.folders <- list.dirs(recursive = FALSE)
file.names_practice <- NULL
file.names_main <- NULL
file.names_extend <- NULL
# This function returns an array of both the start and end portions of the current trial
# (e.g., "Start Trial 7, AmbigVideo 7" (or whatever)), but it gives me an error. So, I'm including
# the code incase anyone wants to use it later.
# trial_time1 <- function(x) {
#
#   f = df_timestamps$system_time_stamp
#   a = x
#   maxless <- max(f[f <= a])
#   # find out which value that is
#   y = which(f == maxless)
#   z = as.character(df_timestamps$point_description[y])
#
#   z1 = as.character(df_timestamps$point_description[y+1])
#   z2 <- paste(z1, z, sep=",")
#
#   #x <- cbind(x, newColumn = z2)
#
#   return(z2)
# }
############################
# LOOPING THROUGH ALL THE SUBJECTS (1 subject at a time)
############################
for(i in subj.folders){
############################
# Importing files specific to participant
############################
# Gettting all the practice trials for 1 subject
file.names_practice_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
file.names_practice <- c(file.names_practice, file.names_practice_temp)
# Getting all the main trials for 1 subject
file.names_main_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, all.files = FALSE, pattern = ".*(Main|noBias)_.*\\.csv$")
x = (file.names_main_temp)
if(identical(x,character(0))) {
NULL
}
else {
file.names_main <- c(file.names_main, file.names_main_temp)
}
# Getting all the extend trials for 1 subject
file.names_extend_temp <- list.files(path = i, full.names = TRUE, recursive = FALSE, pattern = ".*\\Extend_.*.csv")
file.names_extend <- c(file.names_extend, file.names_extend_temp)
# Importing timestamps
timestamps <- list.files(path = i, pattern="^timestamps.*\\.csv", full.names = TRUE )
print(timestamps)
if(identical(timestamps,character(0))) {
NULL
}
else {
temp <- read.csv(timestamps, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_timestamps <- rbind(df_timestamps, temp)
}
}
############################
# LOOKING AT PRACTICE TRIALS
############################
for(i in subj.folders){
# Reading in data table
data_table <- list.files(path = i, pattern=".*\\.dat", full.names=TRUE)
if(identical(data_table, character(0))) {
NULL
}
else {
temp <- read.delim(data_table, header=TRUE, sep=",")
df_data_table <- rbind(df_data_table, temp)
}
## makes an empty data frame
subjData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_practice <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eye-tracking data of the practice runs in the data frame
for(file in file.names_practice){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_practice <-rbind(df_practice, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_practice)[which(names(df_practice) == "description")] <- "trialNo"
df_practice$L_valid <- as.factor(df_practice$L_valid)
df_practice$R_valid <- as.factor(df_practice$R_valid)
df_practice$system_time_stamp <- df_practice$system_time_stamp - 1500000000000000
df_practice$phase <- 'Practice'
# Merging together dat_table and trials to get correctness
df_practice$trialNo <- as.factor(ifelse(df_practice$trialNo == "All_of_Practice_1", "1",
ifelse(df_practice$trialNo == "All_of_Practice_2", "2",
ifelse(df_practice$trialNo == "All_of_Practice_3", "3",
ifelse(df_practice$trialNo == "All_of_Practice_4", "4", "Error")))))
subjData <- rbind(subjData, df_practice)
}
############################
# LOOKING AT MAIN TRIALS
############################
for(i in subj.folders){
## making an empty data frame
df_main <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eyetracking data for the main trials in the data frame
for(file in file.names_main){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_main <- rbind(df_main, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_main)[which(names(df_main) == "description")] <- "trialNo"
df_main$L_valid <- as.factor(df_main$L_valid)
df_main$R_valid <- as.factor(df_main$R_valid)
df_main$system_time_stamp <- df_main$system_time_stamp - 1500000000000000
df_main$phase <- 'Main'
# Merging together dat_table and trials to get correctness
df_main$trialNo <- as.factor(ifelse(df_main$trialNo == "All_of_noBias_trial_1", "1",
ifelse(df_main$trialNo == "All_of_noBias_trial_2", "2",
ifelse(df_main$trialNo == "All_of_noBias_trial_3", "3",
ifelse(df_main$trialNo == "All_of_noBias_trial_4", "4",
ifelse(df_main$trialNo == "All_of_Main_trial_5", "5",
ifelse(df_main$trialNo == "All_of_Main_trial_6", "6",
ifelse(df_main$trialNo == "All_of_Main_trial_7", "7",
ifelse(df_main$trialNo == "All_of_Main_trial_8", "8", "Error")))))))))
## adds practice data and main trials data together in one data frame
subjData <- rbind(subjData, df_main)
}
##########################
# LOOKING AT EXTEND TRIALS
##########################
for(i in subj.folders){
# Reading in extend trial CSVs
## making an empty data frame
df_extend <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
## adds all the eyetracking data of the extend trials in the data frame
for(file in file.names_extend){
temp <- read.csv(file, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
if("trialNo" %in% colnames(temp)) {
temp <- subset(temp, select=-c(trialNo))
}
df_extend <-rbind(df_extend, temp)
}
# Cleaning up the data to get it in the form I want
colnames(df_extend)[which(names(df_extend) == "description")] <- "trialNo"
df_extend$L_valid <- as.factor(df_extend$L_valid)
df_extend$R_valid <- as.factor(df_extend$R_valid)
df_extend$system_time_stamp <- df_extend$system_time_stamp - 1500000000000000
df_extend$phase <- 'Extend'
# Merging together dat_table and trials to get correctness
df_extend$trialNo <- as.factor(ifelse(df_extend$trialNo == "All_of_Extend_trial_5", "13",
ifelse(df_extend$trialNo == "All_of_Extend_trial_6", "14",
ifelse(df_extend$trialNo == "All_of_Extend_trial_7", "7",
ifelse(df_extend$trialNo == "All_of_Extend_trial_8", "8",
ifelse(df_extend$trialNo == "All_of_Extend_trial_1", "9",
ifelse(df_extend$trialNo == "All_of_Extend_trial_2", "10",
ifelse(df_extend$trialNo == "All_of_Extend_trial_3", "11",
ifelse(df_extend$trialNo == "All_of_Extend_trial_4", "12", "Error")))))))))
subjData <- rbind(subjData, df_extend)
}
############################
# THIS IS WHERE THE FOR LOOP ENDS
############################
############################
# ANALYSES TO START AFTER EXPORTING ONE GIANT-ASS DF
############################
# Reformatting data table
colnames(df_data_table)[1] <- c("subjectID")
df_data_table$trialNo <- as.factor(df_data_table$trialNo)
# Reformatting timestamps
df_timestamps$system_time_stamp <- df_timestamps[,2] - 1500000000000000
View(df_timestamps)
# This script is looking at the eyetracking data of MPP2ET. We're going to read
# in each participant's trials one by one, append them to each specific phase
# (Practice, Main, Extend), and then append them all to a dataframe. We're going
# to loop through each participant.
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
#install.packages("stringr")
library("stringr")
setwd('/Users/crystallee/Documents/Github/MannerPathPriming-2ET/Data')
############################
# Getting ready
############################
# Reading in subject list
subjects <- read.csv("MPP2ET_Pilot_Data.csv")
# Declaring an empty df to append to
allData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_data_table <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_timestamps <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
# Declaring my function
## Declaring function trial_time, where a is a given value and f a timestamp
trial_time <- function(x) {
f = df_timestamps$system_time_stamp
a = x
## search for the maximum timestamp where the timestamp is equal to or less than value a
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
## if the vector is empty, return the timestamp of the minimum value bigger than a,
## if the vector is not empty, return the vector
if(identical(z,character(0))) {
y = min(which(f > a))
temp = as.character(df_timestamps$point_description[y])
return(temp)
} else {
return(z)
}
}
# Declaring empty variables
subj.folders <- list.dirs(recursive = FALSE)
file.names_practice <- NULL
file.names_main <- NULL
file.names_extend <- NULL
# This function returns an array of both the start and end portions of the current trial
# (e.g., "Start Trial 7, AmbigVideo 7" (or whatever)), but it gives me an error. So, I'm including
# the code incase anyone wants to use it later.
# trial_time1 <- function(x) {
#
#   f = df_timestamps$system_time_stamp
#   a = x
#   maxless <- max(f[f <= a])
#   # find out which value that is
#   y = which(f == maxless)
#   z = as.character(df_timestamps$point_description[y])
#
#   z1 = as.character(df_timestamps$point_description[y+1])
#   z2 <- paste(z1, z, sep=",")
#
#   #x <- cbind(x, newColumn = z2)
#
#   return(z2)
# }
############################
# LOOPING THROUGH ALL THE SUBJECTS (1 subject at a time)
############################
for(i in subj.folders){
############################
# Importing files specific to participant
############################
# Gettting all the practice trials for 1 subject
file.names_practice_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
file.names_practice <- c(file.names_practice, file.names_practice_temp)
# Getting all the main trials for 1 subject
file.names_main_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, all.files = FALSE, pattern = ".*(Main|noBias)_.*\\.csv$")
x = (file.names_main_temp)
if(identical(x,character(0))) {
NULL
}
else {
file.names_main <- c(file.names_main, file.names_main_temp)
}
# Getting all the extend trials for 1 subject
file.names_extend_temp <- list.files(path = i, full.names = TRUE, recursive = FALSE, pattern = ".*\\Extend_.*.csv")
file.names_extend <- c(file.names_extend, file.names_extend_temp)
# Importing timestamps
timestamps <- list.files(path = i, pattern="^timestamps.*\\.csv", full.names = TRUE )
print(timestamps)
if(identical(timestamps,character(0))) {
NULL
}
else {
temp <- read.csv(timestamps, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_timestamps <- rbind(df_timestamps, temp)
}
}
# This script is looking at the eyetracking data of MPP2ET. We're going to read
# in each participant's trials one by one, append them to each specific phase
# (Practice, Main, Extend), and then append them all to a dataframe. We're going
# to loop through each participant.
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
#install.packages("stringr")
library("stringr")
setwd('/Users/crystallee/Documents/Github/MannerPathPriming-2ET/Data')
############################
# Getting ready
############################
# Reading in subject list
subjects <- read.csv("MPP2ET_Pilot_Data.csv")
# Declaring an empty df to append to
allData <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_data_table <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df_timestamps <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
# Declaring my function
## Declaring function trial_time, where a is a given value and f a timestamp
trial_time <- function(x) {
f = df_timestamps$system_time_stamp
a = x
## search for the maximum timestamp where the timestamp is equal to or less than value a
maxless <- max(f[f <= a])
# find out which value that is
y = which(f == maxless)
z = as.character(df_timestamps$point_description[y])
## if the vector is empty, return the timestamp of the minimum value bigger than a,
## if the vector is not empty, return the vector
if(identical(z,character(0))) {
y = min(which(f > a))
temp = as.character(df_timestamps$point_description[y])
return(temp)
} else {
return(z)
}
}
# Declaring empty variables
subj.folders <- list.dirs(recursive = FALSE)
file.names_practice <- NULL
file.names_main <- NULL
file.names_extend <- NULL
# This function returns an array of both the start and end portions of the current trial
# (e.g., "Start Trial 7, AmbigVideo 7" (or whatever)), but it gives me an error. So, I'm including
# the code incase anyone wants to use it later.
# trial_time1 <- function(x) {
#
#   f = df_timestamps$system_time_stamp
#   a = x
#   maxless <- max(f[f <= a])
#   # find out which value that is
#   y = which(f == maxless)
#   z = as.character(df_timestamps$point_description[y])
#
#   z1 = as.character(df_timestamps$point_description[y+1])
#   z2 <- paste(z1, z, sep=",")
#
#   #x <- cbind(x, newColumn = z2)
#
#   return(z2)
# }
############################
# LOOPING THROUGH ALL THE SUBJECTS (1 subject at a time)
############################
for(i in subj.folders){
############################
# Importing files specific to participant
############################
# Gettting all the practice trials for 1 subject
file.names_practice_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, pattern = ".*\\Practice_.*.csv")
file.names_practice <- c(file.names_practice, file.names_practice_temp)
# Getting all the main trials for 1 subject
file.names_main_temp <- list.files(path = i, recursive = FALSE, full.names = TRUE, all.files = FALSE, pattern = ".*(Main|noBias)_.*\\.csv$")
x = (file.names_main_temp)
if(identical(x,character(0))) {
NULL
}
else {
file.names_main <- c(file.names_main, file.names_main_temp)
}
# Getting all the extend trials for 1 subject
file.names_extend_temp <- list.files(path = i, full.names = TRUE, recursive = FALSE, pattern = ".*\\Extend_.*.csv")
file.names_extend <- c(file.names_extend, file.names_extend_temp)
# Importing timestamps
timestamps <- list.files(path = i, pattern="^timestamps.*\\.csv", full.names = TRUE )
print(timestamps)
if(identical(timestamps,character(0))) {
NULL
}
else {
temp <- read.csv(timestamps, header = TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
df_timestamps <- rbind(df_timestamps, temp)
}
}
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
#install.packages("stringr")
library("stringr")
setwd('~/Desktop/MannerPathPriming-3ET/Analysis/MPP2 analysis flow')
############################
# Getting ready
############################
# Reading in subject list
subjects <- read.csv("MPP2ET_Pilot_Data.csv")
# Reading in subject list
subjects <- read.csv("MPP2ET_Pilot_Data.csv")
# Reading in subject list
subjects <- read.csv("MPP2ET_Pilot_Data.csv")
setwd('~/Desktop/MannerPathPriming-3ET/Analysis/MPP2 analysis flow/')
# Reading in subject list
subjects <- read.csv("MPP2ET_Pilot_Data.csv")
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("stringr")
mydirectory=getwd()
setwd(mydirectory)
############################
# Getting ready
############################
# Reading in subject list
subjects <- read.csv("all_participants_MPP2ET.csv")
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("stringr")
mydirectory=getwd()
setwd(mydirectory)
# Reading in subject list
subjects <- read.csv("all_participants_MPP2ET.csv")
# Reading in subject list
subjects <- read.csv("all_participants_MPP3ET.csv")
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
library("stringr")
mydirectory=getwd()
setwd(mydirectory)
# Reading in subject list
subjects <- read.csv("all_participants_MPP3ET.csv")
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
#install.packages("stringr")
library("stringr")
setwd('~/Desktop/MannerPathPriming-3ET/Analysis')
# Reading in subject list
subjects <- read.csv("MPP2ET_Pilot_Data.csv")
setwd('~/Desktop/MannerPathPriming-3ET/Analysis')
# Reading in subject list
subjects <- read.csv("MPP3ET_Pilot_Data.csv")
# This script is looking at the eyetracking data of MPP2ET. We're going to read
# in each participant's trials one by one, append them to each specific phase
# (Practice, Main, Extend), and then append them all to a dataframe. We're going
# to loop through each participant.
#install.packages("devtools")
#devtools::install_github("jwdink/eyetrackingR")
library("eyetrackingR")
library("plyr")
library("dplyr")
library("lme4")
library("ggplot2")
library("Matrix")
#install.packages("stringr")
library("stringr")
setwd('~/Desktop/MannerPathPriming-3ET')
############################
# Getting ready
############################
# Reading in subject list
subjects <- read.csv("MPP3ET_Pilot_Data.csv")
setwd('~/Desktop/MannerPathPriming-3ET/Data')
# Reading in subject list
subjects <- read.csv("MPP3ET_Pilot_Data.csv")
setwd('~/Desktop/MannerPathPriming-3ET')
# Reading in subject list
subjects <- read.csv("all_participants_MPP3ET")
